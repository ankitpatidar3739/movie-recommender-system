# -*- coding: utf-8 -*-
"""movie-recommender-system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uYP-MHGqqi8Sb5mNCco30M8ZoyCRcMq0
"""

import numpy as np # linear algebra
import pandas as pd

movies = pd.read_csv('/content/tmdb_5000_movies.csv')
credits = pd.read_csv('/content/tmdb_5000_credits.csv')

movies.head(2)

movies.shape

credits.head()

movies=movies.merge(credits,on='title')

movies=movies[['movie_id','title','overview','genres','keywords','cast','crew']]

movies.head()

import ast

def convert(text):
  L=[]
  for i in ast.literal_eval(text):
    L.append(i['name'])
  return L

movies['genres']=movies['genres'].apply(convert)

movies.head()

movies['keywords']=movies['keywords'].apply(convert)

movies['cast'][0]

def convert3(text):
  L=[]
  counter=0
  for i in ast.literal_eval(text):
    if counter!=3:
      L.append(i['name'])
      counter+=1
    else:
      break
  return L

movies['cast']=movies['cast'].apply(convert3)

movies.head()

movies['crew'][0]

def fetch_director(text):
  L=[]
  for i in ast.literal_eval(text):
    if i['job']=='Director':
      L.append(i['name'])
      break
  return L

movies['crew']=movies['crew'].apply(fetch_director)

movies['overview'][0]

movies['overview']=movies['overview'].apply(lambda x:x.split() if isinstance(x, str) else [])

movies.head()

from re import L
movies['genres']=movies['genres'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

new_df=movies[['movie_id','title','tags']]

new_df['tags']=new_df['tags'].apply(lambda x:" ".join(x))

new_df.head()

import nltk

from nltk.stem.porter import PorterStemmer
ps=PorterStemmer()

def stem(text):
  y=[]

  for i in text.split():
    y.append(ps.stem(i))

  return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

new_df['tags'][0]



new_df['tags'].apply(lambda x:x.lower())

from sklearn.feature_extraction.text import CountVectorizer
cv=CountVectorizer(max_features=5000,stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

vectors[0]

cv.get_feature_names_out()

from sklearn.metrics.pairwise import cosine_similarity

similarity=cosine_similarity(vectors)

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])

similarity[1]

import pandas as pd
from difflib import get_close_matches

def recommend(movie):

    standardized_movie = movie.lower()
    lowercase_titles = new_df['title'].str.lower()


    movie_indices = new_df[lowercase_titles == standardized_movie].index


    if movie_indices.empty:

        suggested_titles = get_close_matches(
            movie,
            new_df['title'].tolist(),
            n=5,
            cutoff=0.6
        )

        if not suggested_titles:
            print(f"Error: Movie '{movie}' not found in the dataset. Please check the spelling.")
            print("Could not find any close matches.")
            return

        print(f"Movie '{movie}' not found. Did you mean one of these titles?")
        for i, title in enumerate(suggested_titles):
            print(f"  {i+1}: {title}")


        while True:
            try:

                selection = input("\nEnter the number of the movie you want to select (or type '0' to quit): ")
                selection_index = int(selection)

                if selection_index == 0:
                    print("Recommendation process cancelled.")
                    return
                elif 1 <= selection_index <= len(suggested_titles):

                    selected_title = suggested_titles[selection_index - 1]

                    movie_indices = new_df[new_df['title'] == selected_title].index
                    break
                else:
                    print("Invalid selection. Please enter a number between 0 and " + str(len(suggested_titles)) + ".")
            except ValueError:
                print("Invalid input. Please enter a number.")


    movie_index = movie_indices[0]


    if hasattr(similarity, 'shape') and similarity.ndim == 2:
        distances = similarity[movie_index]
    else:

        distances = similarity[movie_index]


    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]

    print(f"\nRecommendations for '{new_df.iloc[movie_index].title}':")
    for i in movies_list:
        print(new_df.iloc[i[0]].title)

recommend('hangover')

recommend('batman begins')

recommend('pirates of the carribean')

recommend('the godfather')

